#!/bin/sh

# This script installs the Nix package manager on your system by
# downloading a binary distribution and running its installer script
# (which in turn creates and populates /nix).

{ # Prevent execution if this script was only partially downloaded
oops() {
    echo "$0:" "$@" >&2
    exit 1
}

umask 0022

tmpDir="$(mktemp -d -t nix-binary-tarball-unpack.XXXXXXXXXX || \
          oops "Can't create temporary directory for downloading the Nix binary tarball")"
cleanup() {
    rm -rf "$tmpDir"
}
trap cleanup EXIT INT QUIT TERM

require_util() {
    command -v "$1" > /dev/null 2>&1 ||
        oops "you do not have '$1' installed, which I need to $2"
}

case "$(uname -s).$(uname -m)" in
    Linux.x86_64)
        hash=1db7da38540fa2bcff93d11b0ef6a0493d60058e6c881e6c8764efaee8b5b18e
        path=4nlf0bqyhyg1rnc995fi7lg71bn5cdc1/nix-2.5.0-x86_64-linux.tar.xz
        system=x86_64-linux
        ;;
    Linux.i?86)
        hash=25066c77081d837c4941891466ebdcc7d27ca39aea7eb9e6fc4548af2da2ea8f
        path=njx66q6zzpgzxmwq70amidvzcyai94y8/nix-2.5.0-i686-linux.tar.xz
        system=i686-linux
        ;;
    Linux.aarch64)
        hash=b0aa723fe510854381333ce84f753f6afc4de55f2f2ff6ea5ede2f1c6b9c9d9f
        path=cj7wzg13rl08f2y8jr8drbav8ir5ln29/nix-2.5.0-aarch64-linux.tar.xz
        system=aarch64-linux
        ;;
    Linux.armv6l_linux)
        hash=bdcb885e4418543cf1e4a236c05b304f5b86ebe241a9c0928b7eee575ab1481d
        path=9yc7qpap6f548ajrj5n9xxyyfipj7im3/nix-2.5.0-armv6l-linux.tar.xz
        system=armv6l-linux
        ;;
    Linux.armv7l_linux)
        hash=1a4fae1b5e250ad7a76bd7ccd0749d77fb19b8a07ac6c9ff1d903101601c7995
        path=s370d4xvkhnadx0f3l5vbbpjr6rdw19v/nix-2.5.0-armv7l-linux.tar.xz
        system=armv7l-linux
        ;;
    Darwin.x86_64)
        hash=ee0712b56d0fb26bca2894c87738eaa4739d2f197a1bfb209c67d1ff3951481c
        path=pblw23n739dk8rqi2bp27d90vvmaigqs/nix-2.5.0-x86_64-darwin.tar.xz
        system=x86_64-darwin
        ;;
    Darwin.arm64|Darwin.aarch64)
        hash=6ffbb78b1bca88bf05ead4e896399afbab75b0d3be85951ad6247baf9a8aab88
        path=7i2hxnw836p48m4j4x4a51iasp6dyz3z/nix-2.5.0-aarch64-darwin.tar.xz
        system=aarch64-darwin
        ;;
    *) oops "sorry, there is no binary distribution of Nix for your platform";;
esac

# Use this command-line option to fetch the tarballs using nar-serve or Cachix
if [ "${1:-}" = "--tarball-url-prefix" ]; then
    if [ -z "${2:-}" ]; then
        oops "missing argument for --tarball-url-prefix"
    fi
    url=${2}/${path}
    shift 2
else
    url=https://releases.nixos.org/nix/nix-2.5.0/nix-2.5.0-$system.tar.xz
fi

tarball=$tmpDir/nix-2.5.0-$system.tar.xz

require_util tar "unpack the binary tarball"
if [ "$(uname -s)" != "Darwin" ]; then
    require_util xz "unpack the binary tarball"
fi

if command -v curl > /dev/null 2>&1; then
    fetch() { curl -L "$1" -o "$2"; }
elif command -v wget > /dev/null 2>&1; then
    fetch() { wget "$1" -O "$2"; }
else
    oops "you don't have wget or curl installed, which I need to download the binary tarball"
fi

echo "downloading Nix 2.5.0 binary tarball for $system from '$url' to '$tmpDir'..."
fetch "$url" "$tarball" || oops "failed to download '$url'"

if command -v sha256sum > /dev/null 2>&1; then
    hash2="$(sha256sum -b "$tarball" | cut -c1-64)"
elif command -v shasum > /dev/null 2>&1; then
    hash2="$(shasum -a 256 -b "$tarball" | cut -c1-64)"
elif command -v openssl > /dev/null 2>&1; then
    hash2="$(openssl dgst -r -sha256 "$tarball" | cut -c1-64)"
else
    oops "cannot verify the SHA-256 hash of '$url'; you need one of 'shasum', 'sha256sum', or 'openssl'"
fi

if [ "$hash" != "$hash2" ]; then
    oops "SHA-256 hash mismatch in '$url'; expected $hash, got $hash2"
fi

unpack=$tmpDir/unpack
mkdir -p "$unpack"
tar -xJf "$tarball" -C "$unpack" || oops "failed to unpack '$url'"

script=$(echo "$unpack"/*/install)

[ -e "$script" ] || oops "installation script is missing from the binary tarball!"
export INVOKED_FROM_INSTALL_IN=1
"$script" "$@"

} # End of wrapping
